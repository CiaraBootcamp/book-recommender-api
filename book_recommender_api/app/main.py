# main.py
from fastapi import FastAPI
from pymongo import MongoClient
import os
from dotenv import load_dotenv

# âœ… IMPORTS DE TODOS LOS ROUTERS
from book_recommender_api.app.quiz import router as quiz_router
from book_recommender_api.app.personality import router as personality_router
from book_recommender_api.app.explain import router as explain_router
from book_recommender_api.app.profile import router as profile_router
from book_recommender_api.app.books_controller import router as books_router  # ðŸ”¥ AÃ‘ADIDO
# Si luego usas `recommendations_router`, aquÃ­ tambiÃ©n se importa

# âœ… Carga de variables y creaciÃ³n de app
load_dotenv()
app = FastAPI(title="Book Recommender API")

# ConexiÃ³n MongoDB para test de salud (no obligatorio aquÃ­ si usas get_db en routers)
MONGO_URI = os.getenv("MONGO_URI", "mongodb://localhost:27017")
client = MongoClient(MONGO_URI)

# âœ… InclusiÃ³n de todos los routers con prefijo si se desea
app.include_router(quiz_router, prefix="/quiz")
app.include_router(personality_router, prefix="/personality")
app.include_router(explain_router, prefix="/explain")
app.include_router(profile_router, prefix="/profile")
app.include_router(books_router, prefix="/api")  # ðŸ“š NUEVO ENDPOINT

# âœ… RaÃ­z
@app.get("/")
def root():
    return {"message": "API de RecomendaciÃ³n de Libros activa"}

# âœ… Endpoint de salud (versiÃ³n robusta)
@app.get("/health")
def health_check():
    try:
        client.admin.command('ping')
        return {"status": "ok", "mongodb": "conectado"}
    except Exception as e:
        return {"status": "error", "mongodb": "no conectado", "error": str(e)}
